{"version":3,"sources":["components/Bar.js","components/Form.js","algorithms/insertionSort.js","algorithms/helpers.js","algorithms/bubbleSort.js","algorithms/mergeSort.js","algorithms/quickSort.js","App.js","index.js"],"names":["Bar","style","height","length","backgroundColor","colorKey","className","Form","formLabel","values","labels","currentValue","onChange","FormControl","FormLabel","RadioGroup","value","map","index","FormControlLabel","key","control","Radio","label","insertionSort","array","position","arraySteps","colorSteps","slice","i","el","j","push","swap","indexA","indexB","temp","insertStep","arrayNew","currentStep","splice","bubbleSort","Array","fill","merge","arrayA","arrayB","shift","updateColor","concat","start","end","mergeSort","mid","Math","floor","quickSort","A","B","C","middleValue","sort","indexOf","pickPivot","pivot","bigIndex","max","App","state","timeouts","algorithm","barCount","delay","ALGO_SET","generateSteps","steps","setState","stepBack","clearTimeouts","stepForward","changeAlgorithm","event","target","clearColorKey","changeBarCount","generateBars","changeDelay","parseInt","forEach","timeout","clearTimeout","blankKey","barsTemp","random","this","setTimeout","playButton","barsDiv","IconButton","onClick","Pause","color","RotateLeft","setTimeouts","PlayArrow","SkipPrevious","SkipNext","e","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.09c10b02.chunk.js","sourcesContent":["import React from 'react';\nimport \"./Bar.css\"\n\nfunction Bar({ length, colorKey }) {\n  const COLOR_SET = [\"grey\", \"orange\", \"green\"];\n\n  let color = COLOR_SET[colorKey];\n\n  let style = {\n    height: length,\n    backgroundColor: color,\n  }\n\n  return (\n    <div className=\"bar\" style={style} ></div>\n  )\n}\n\nexport default Bar;","import React from 'react';\nimport { FormControl, FormControlLabel, FormLabel, Radio, RadioGroup } from '@material-ui/core';\n\nexport default function Form({ formLabel, values, labels, currentValue, onChange }) {\n  return (\n    <div className=\"card container-small\">\n      <FormControl>\n        <FormLabel>{formLabel}</FormLabel>\n        <RadioGroup value={currentValue} onChange={onChange}>\n          {values.map((value, index) => {\n            return (<FormControlLabel\n              key={`${value}_${index}`}\n              value={values[index]}\n              control={<Radio />}\n              label={labels[index]} />);\n          })}\n        </RadioGroup>\n      </FormControl>\n    </div>\n  );\n}","const insertionSort = (array,  position, arraySteps, colorSteps) => {\n  let colorKey = colorSteps[colorSteps.length - 1].slice();\n  for (let i = 0; i < array.length; i++) {\n    let el = array[i];\n    let j;\n\n    for (j = i - 1; j >= 0 && array[j] > el; j--) {\n      array[j + 1] = array[j];\n      arraySteps.push(array.slice());\n      colorKey[j] = 1;\n      colorKey[j + 1] = 1;\n      colorSteps.push(colorKey.slice());\n      colorKey[j] = 0;\n      colorKey[j + 1] = 0;\n    }\n    array[j + 1] = el;\n    colorKey[array.length - 1 - i] = 2;\n    arraySteps.push(array.slice());\n    colorSteps.push(colorKey.slice());\n  }\n  \n}\n\nexport default insertionSort;\n","\nexport function swap(array, indexA, indexB) {\n  let temp = array[indexA];\n  array[indexA] = array[indexB];\n  array[indexB] = temp;\n  return array;\n}\n\nexport function insertStep(arrayNew, position, arraySteps) {\n  let currentStep = arraySteps[arraySteps.length - 1].slice();\n  currentStep.splice(position, arrayNew.length, ...arrayNew);\n  arraySteps.push(currentStep);\n}","import { swap } from './helpers';\n\nconst bubbleSort = (array, position, arraySteps, colorSteps) => {\n  let colorKey = colorSteps[colorSteps.length - 1].slice();\n\n  for (let i = 0; i < array.length - 1; i++) {\n    for (let j = 0; j < array.length - i - 1; j++) {\n      if (array[j] > array[j + 1]) {\n        array = swap(array, j, j + 1);\n      }\n      arraySteps.push(array.slice());\n      colorKey[j] = 1;\n      colorKey[j + 1] = 1;\n      colorSteps.push(colorKey.slice());\n      colorKey[j] = 0;\n      colorKey[j + 1] = 0;\n    }\n    colorKey[array.length - 1 - i] = 2;\n    arraySteps.push(array.slice());\n    colorSteps.push(colorKey.slice());\n  }\n\n  // Remaining bars become green\n  colorSteps[colorSteps.length - 1] = new Array(array.length).fill(2);\n  return;\n}\n\nexport default bubbleSort;\n","import { insertStep } from './helpers';\n\nfunction mergeSort(array, position, arraySteps, colorSteps) {\n  if (array.length === 1) return array;\n  let mid = Math.floor(array.length / 2);\n\n  // Split and work recursively\n  let arrayA = mergeSort(array.slice(0, mid), position, arraySteps, colorSteps);\n  let arrayB = mergeSort(array.slice(mid), position + mid, arraySteps, colorSteps);\n\n  let arrayNew = merge(arrayA, arrayB, position, arraySteps, colorSteps);\n  arraySteps.push(arraySteps[arraySteps.length - 1].slice());\n  colorSteps.push(colorSteps[colorSteps.length - 1].fill(arrayNew.length === arraySteps[0].length ? 2 : 0));\n  return arrayNew;\n}\n\nconst merge = (arrayA, arrayB, position, arraySteps, colorSteps) => {\n  let arrayNew = [];\n  let A = 0;\n  let B = 0;\n\n  while (arrayA.length > 0 && arrayB.length > 0) {\n    if (arrayA[A] < arrayB[B]) {\n      arrayNew.push(arrayA.shift());\n      insertStep(arrayNew, position, arraySteps);\n    } else {\n      arrayNew.push(arrayB.shift());\n      insertStep(arrayNew, position, arraySteps);\n    }\n    updateColor(position, colorSteps, arrayNew.length - 1, [], []);\n  }\n\n  // concatenate remaining values\n\n  if (arrayA.length !== 0 || arrayB.length !== 0) {\n    updateColor(position, colorSteps, arrayNew.length, arrayA, arrayB);\n    arrayNew = arrayNew.concat(arrayA);\n    arrayNew = arrayNew.concat(arrayB)\n    insertStep(arrayNew, position, arraySteps);\n  }\n\n  return arrayNew;\n}\n\nfunction updateColor(position, colorSteps, start, arrayA, arrayB) {\n  let colorKey = colorSteps[colorSteps.length - 1].slice();\n  let end = position + start + arrayA.length + arrayB.length;\n  start = start + position;\n\n  if (end === start) {\n    colorKey.fill(1, start, end + 1);\n  } else {\n    colorKey.fill(1, start, end);\n  }\n  colorSteps.push(colorKey);\n}\n\nexport default mergeSort;","import { swap, insertStep } from './helpers';\n\nconst quickSort = (array, position, arraySteps, colorSteps) => {\n  if (array.length < 2) {\n    insertStep(array, position, arraySteps);\n\n    let colorKey = colorSteps[colorSteps.length - 1].slice();\n    colorKey[position] = 2;\n    colorSteps.push(colorKey);\n    return;\n  }\n\n  // pick median of three numbers as pivot and sent it to back\n  swap(array, pickPivot(array), array.length - 1);\n  insertStep(array, position, arraySteps);\n  colorSteps.push(colorSteps[colorSteps.length - 1].slice());\n\n  let pivot = array[array.length - 1];\n  let A = 0;\n  let B = array.length - 1;\n\n  // swap small value from right with big value from left\n  while (A < B) {\n    while (array[A] < pivot) {\n      insertStep(array, position, arraySteps);\n      let colorKey = colorSteps[colorSteps.length - 1].slice();\n      colorKey = colorKey.map(key => key === 2 ? 2 : 0);\n      colorKey[position + A] = 1;\n      colorKey[position + B] = 1;\n      colorSteps.push(colorKey);\n      A++;\n    }\n    while (array[B] >= pivot) {\n      insertStep(array, position, arraySteps);\n      let colorKey = colorSteps[colorSteps.length - 1].slice();\n      colorKey = colorKey.map(key => key === 2 ? 2 : 0);\n      colorKey[position + A] = 1;\n      colorKey[position + B] = 1;\n      colorSteps.push(colorKey);\n      B--;\n    }\n    if (A < B) {\n      swap(array, A, B);\n      insertStep(array, position, arraySteps);\n      let colorKey = colorSteps[colorSteps.length - 1].slice();\n      colorKey = colorKey.map(key => key === 2 ? 2 : 0);\n      colorKey[position + A] = 1;\n      colorKey[position + B] = 1;\n      colorSteps.push(colorKey);\n    }\n  }\n\n  // swap big value with pivot\n  let bigIndex = Math.max(A, B);\n\n  swap(array, bigIndex, array.length - 1);\n  insertStep(array, position, arraySteps);\n  let colorKey = colorSteps[colorSteps.length - 1].slice();\n  colorKey[position + bigIndex] = 2;\n  colorSteps.push(colorKey);\n\n  // recurse on two halves\n  quickSort(array.slice(0, A), position, arraySteps, colorSteps);\n  quickSort(array.slice(A + 1), position + A + 1, arraySteps, colorSteps);\n\n  return;\n}\n\nfunction pickPivot(array) {\n  let A = array[0];\n  let B = array[Math.floor(array.length / 2)];\n  let C = array[array.length - 1];\n\n  let middleValue = [A, B, C].sort()[1];\n  let middleIndex = array.indexOf(middleValue);\n\n  return middleIndex;\n}\n\nexport default quickSort;","import React from 'react';\nimport { IconButton } from '@material-ui/core';\nimport { PlayArrow, Pause, SkipPrevious, SkipNext, RotateLeft } from '@material-ui/icons';\nimport Bar from './components/Bar';\nimport Form from './components/Form';\n\n// style\nimport './App.css';\n\n// algorithms \nimport insertionSort from './algorithms/insertionSort';\nimport bubbleSort from './algorithms/bubbleSort';\nimport mergeSort from './algorithms/mergeSort';\nimport quickSort from './algorithms/quickSort';\n\nclass App extends React.Component {\n  state = {\n    array: [],\n    colorKey: [],\n    arraySteps: [],\n    colorSteps: [],\n    currentStep: 0,\n    timeouts: [],\n    algorithm: 'Insertion Sort',\n    barCount: 10,\n    delay: 200,\n  }\n\n  ALGO_SET = {\n    'Insertion Sort': insertionSort,\n    'Bubble Sort': bubbleSort,\n    'Merge Sort': mergeSort,\n    'Quick Sort': quickSort,\n  }\n\n  componentDidMount() {\n    this.generateBars();\n  }\n\n  generateSteps = () => {\n    let array = this.state.array.slice();\n    let steps = this.state.arraySteps.slice();\n    let colorSteps = this.state.colorSteps.slice();\n\n    this.ALGO_SET[this.state.algorithm](array, 0, steps, colorSteps);\n\n    this.setState({\n      arraySteps: steps,\n      colorSteps: colorSteps,\n    });\n  }\n\n  setTimeouts() {\n    let steps = this.state.arraySteps;\n    let colorSteps = this.state.colorSteps;\n\n    this.clearTimeouts();\n    let timeouts = [];\n    let i = 0;\n\n    while (i < steps.length - this.state.currentStep) {\n      let timeout = setTimeout(() => {\n        let currentStep = this.state.currentStep;\n        this.setState({\n          array: steps[currentStep],\n          colorKey: colorSteps[currentStep],\n          currentStep: currentStep + 1,\n        });\n      }, this.state.delay * (i));\n      timeouts.push(timeout);\n      i++;\n    }\n\n    this.setState({\n      timeouts: timeouts,\n    });\n  }\n\n  stepBack = () => {\n    if (this.state.currentStep === 0) return;\n    this.clearTimeouts();\n\n    let currentStep = this.state.currentStep - 1;\n    this.setState({\n      array: this.state.arraySteps[currentStep],\n      colorKey: this.state.colorSteps[currentStep],\n      currentStep: currentStep,\n    });\n  }\n\n  stepForward = () => {\n    if (this.state.currentStep >= this.state.arraySteps.length - 1) return;\n    this.clearTimeouts();\n\n    let currentStep = this.state.currentStep + 1;\n    this.setState({\n      array: this.state.arraySteps[currentStep],\n      colorKey: this.state.colorSteps[currentStep],\n      currentStep: currentStep,\n    });\n  }\n\n  changeAlgorithm = (event) => {\n    this.setState({\n      algorithm: event.target.value,\n      currentStep: 0,\n      arraySteps: [this.state.arraySteps[this.state.currentStep === 0 ? 0 : this.state.currentStep - 1]],\n    }, () => this.generateSteps());\n    this.clearTimeouts();\n    this.clearColorKey();\n  };\n\n  changeBarCount = (barCount) => {\n    this.setState({ barCount: barCount }, () => this.generateBars());\n  }\n\n  changeDelay = (event) => {\n    this.clearTimeouts();\n    this.setState({\n      delay: parseInt(event.target.value),\n    });\n  };\n\n  clearTimeouts = () => {\n    this.state.timeouts.forEach(timeout => clearTimeout(timeout));\n    this.setState({\n      timeouts: [],\n    })\n  }\n\n  clearColorKey = () => {\n    let blankKey = new Array(parseInt(this.state.barCount)).fill(0);\n    this.setState({\n      colorKey: blankKey,\n      colorSteps: [blankKey],\n    });\n  }\n\n  generateBars = () => {\n    this.clearTimeouts();\n    this.clearColorKey();\n\n    let barCount = parseInt(this.state.barCount);\n    let barsTemp = [];\n\n    for (let i = 0; i < barCount; i++) {\n      barsTemp.push(Math.floor(Math.random() * 90) + 10);\n    }\n\n    this.setState({\n      array: barsTemp,\n      arraySteps: [barsTemp],\n      barCount: barCount,\n      currentStep: 0,\n    }, () => this.generateSteps());\n  }\n\n  render() {\n    let barsDiv = this.state.array.map((value, index) => <Bar\n      key={index}\n      length={value}\n      colorKey={this.state.colorKey[index]}\n    />);\n    let playButton;\n\n    // Set player controls\n    if (this.state.timeouts.length !== 0 && this.state.currentStep !== this.state.arraySteps.length) {\n      playButton = (\n        <IconButton onClick={() => this.clearTimeouts()} >\n          <Pause />\n        </IconButton>\n      );\n    } else if (this.state.currentStep === this.state.arraySteps.length) {\n      playButton = (\n        <IconButton color=\"secondary\" onClick={() => this.generateBars()} >\n          <RotateLeft />\n        </IconButton>\n      )\n    } else {\n      playButton = (\n        <IconButton color=\"secondary\" onClick={() => this.setTimeouts()} >\n          <PlayArrow />\n        </IconButton>);\n    }\n\n    return (\n      <div className=\"App\">\n        <section className=\"bars container card\">\n          {barsDiv}\n        </section>\n\n        <section className=\"container-small\">\n          <IconButton onClick={() => this.generateBars()} >\n            <RotateLeft />\n          </IconButton>\n          <IconButton onClick={this.stepBack} >\n            <SkipPrevious />\n          </IconButton>\n          {playButton}\n          <IconButton onClick={this.stepForward} >\n            <SkipNext />\n          </IconButton>\n          <IconButton />\n        </section>\n\n        <section className=\"controls container-small\">\n          <Form\n            formLabel=\"Algorithm\"\n            values={['Insertion Sort', 'Bubble Sort', 'Merge Sort', 'Quick Sort']}\n            labels={['Insertion Sort', 'Bubble Sort', 'Merge Sort', 'Quick Sort']}\n            currentValue={this.state.algorithm}\n            onChange={this.changeAlgorithm}\n          />\n\n          <Form\n            formLabel=\"Array size\"\n            values={[10, 25, 50, 100]}\n            labels={['10 items', '25 items', '50 items', '100 items']}\n            currentValue={this.state.barCount}\n            onChange={e => this.changeBarCount(e.target.value)}\n          />\n\n          <Form\n            formLabel=\"Speed\"\n            values={[200, 100, 50, 25]}\n            labels={['1x', '2x', '4x', '6x']}\n            currentValue={this.state.delay}\n            onChange={this.changeDelay}\n          />\n        </section>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}